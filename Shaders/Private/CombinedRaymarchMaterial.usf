// Material functions needed to perform a combined raymarcher. This allows two raymarched volumes to be 
// overlaid with correct depth-ordering. Supports arbitrary transforms of both volumes.

// This file contains functions used in Custom nodes in our raymarching materials.
// Because editing in custom node is horrible, it's nicer to just include and use a single 
// function from this file.

// Beware, modifications to this file will not be detected by the material shaders and they will not
// be recompiled. Shaders using this file have to be recompiled manually! (unless we find a way
// to tell the shadercompiler to always recompile the raymarch shaders on startup)

#pragma once
#include "RaymarchMaterialCommon.usf"

// Performs raymarch cube setup for this pixel. Modifies the output parameters instead of returning values.
// All values returned are in UVW space (texture space - normalized to 0-1). 
// This setup is for performing the setup from a shader that's NOT run on the cube itself, it takes the
// cube's transform as a parameter.
void PerformOffsetRaymarchCubeSetup(FMaterialPixelParameters MaterialParameters, float4x4 CubeTransformW2L,
                                    out float4 EntryPos, out float4 ExitPos, out float BoxThickness)
{
    // Get scene depth at this pixel.
    float LocalSceneDepth = CalcSceneDepth(ScreenAlignedPosition(GetScreenPosition(MaterialParameters)));

    // Get camera forward vector in world space.
    float3 CameraFWDVecWorld = mul(float3(0.00000000, 0.00000000, 1.00000000), ResolvedView.ViewToTranslatedWorld);

    // Get world space vector going from camera center to current scene depth.
    float3 WorldDepthVec = normalize(MaterialParameters.CameraVector) * LocalSceneDepth;

    // Transform this vector into the box's local space
    WorldDepthVec = mul(WorldDepthVec, CubeTransformW2L);

    // Get actual depth in local space.
    LocalSceneDepth = length(WorldDepthVec);

    // Account for difference between camera center vector and camera-to-pixel depth
    LocalSceneDepth /= abs(dot(CameraFWDVecWorld, MaterialParameters.CameraVector));

    // Get cam pos and vector into local space too.
    float3 LocalCamPos = mul(float4(ResolvedView.WorldCameraOrigin, 1.00000000), CubeTransformW2L).xyz;
    float3 LocalCamVec = -normalize(mul(float4(ResolvedView.WorldCameraOrigin + MaterialParameters.CameraVector, 1.00000000), CubeTransformW2L).xyz - LocalCamPos);

    // Transform camera pos from local to UVW coords (from +-0.5 to [0 - 1]). Again, The LocalObjectBoundsMax only have an effect if using a non-default cube mesh.
    LocalCamPos += 0.5;
    float3 InverseRayDirVec = 1 / LocalCamVec;
       
    // Get intersections
    float3 FirstIntersections = (0 - LocalCamPos) * InverseRayDirVec;
    float3 SecondIntersections = (1 - LocalCamPos) * InverseRayDirVec;

    // Find closest and furthest intersections
    float3 ClosestIntersections = min(FirstIntersections, SecondIntersections);
    float3 FurthestIntersections = max(FirstIntersections, SecondIntersections);

    // T0 (entry) = the farthest of the closest intersections
    float t0 = max(ClosestIntersections.x, max(ClosestIntersections.y, ClosestIntersections.z));
    // T1 (exit) = the closest of the furthest intersections
    float t1 = min(FurthestIntersections.x, min(FurthestIntersections.y, FurthestIntersections.z));

    // Make sure the entry point is not behind the camera
    t0 = max(0, t0);

    // Make sure the exit point is not behind other scene geometry.
    t1 = min(t1, LocalSceneDepth);

    // Calculate box thickness at this pixel (in local space).
    BoxThickness = max(0, t1 - t0);
    // Get entry position in UVW space.
    EntryPos = float4(LocalCamPos + (t0 * LocalCamVec), 1.0);
    ExitPos = float4(LocalCamPos + (t1 * LocalCamVec), 1.0);
}

// Performs raymarch cube setup for this pixel. Modifies the output parameters instead of returning values.
// All values returned are in UVW space (texture space - normalized to 0-1). 
// This setup is for performing the setup from a shader that's NOT run on the cube itself, it takes the
// cube's transform as a parameter. Does not take into account scene depth and can therefore be used as a generic raytrace 
void PerformOffsetRaymarchCubeSetupNoSceneDepth(float3 CameraPosWS, float3 CameraDir, float4x4 CubeTransformW2L,
                                    out float4 EntryPos, out float4 ExitPos, out float BoxThickness)
{


    // Get cam pos and vector into local space too.
    float3 LocalCamPos = mul(CameraPosWS, CubeTransformW2L).xyz;
    float3 LocalCamVec = -normalize(mul(float4(CameraPosWS + CameraDir, 1.00000), CubeTransformW2L).xyz - LocalCamPos);

    // Transform camera pos from local to UVW coords (from +-0.5 to [0 - 1]). Again, The LocalObjectBoundsMax only have an effect if using a non-default cube mesh.
    LocalCamPos += 0.5;
    float3 InverseRayDirVec = 1 / LocalCamVec;
       
    // Get intersections
    float3 FirstIntersections = (0 - LocalCamPos) * InverseRayDirVec;
    float3 SecondIntersections = (1 - LocalCamPos) * InverseRayDirVec;

    // Find closest and furthest intersections
    float3 ClosestIntersections = min(FirstIntersections, SecondIntersections);
    float3 FurthestIntersections = max(FirstIntersections, SecondIntersections);

    // T0 (entry) = the farthest of the closest intersections
    float t0 = max(ClosestIntersections.x, max(ClosestIntersections.y, ClosestIntersections.z));
    // T1 (exit) = the closest of the furthest intersections
    float t1 = min(FurthestIntersections.x, min(FurthestIntersections.y, FurthestIntersections.z));

    // Make sure the entry point is not behind the camera
    t0 = max(0, t0);

    // Calculate box thickness at this pixel (in local space).
    BoxThickness = max(0, t1 - t0);
    // Get entry position in UVW space.
    EntryPos = float4(LocalCamPos + (t0 * LocalCamVec), 1.0);
    ExitPos = float4(LocalCamPos + (t1 * LocalCamVec), 1.0);
}

// Performs label-only raymarch for the current pixel.
float4 PerformLabelOnlyRaymarchFixedSteps(Texture3D LabelVolume, float4x4 VolumeTransformL2W,
                              float3 EntryPos, float3 ExitPos, float Steps, // Entry&Exit in UVW space
                              FMaterialPixelParameters MaterialParameters)                      // Material Parameters
{
    float3 LocalCamVecNorm = normalize(ExitPos - EntryPos);
    float3 LocalCamVec = LocalCamVecNorm * length(ExitPos - EntryPos) / Steps;
    // Get step size in world units to be consistent with compute shaders' opacity calculations.
    float StepSizeWorld = length(mul(float4(LocalCamVec, 0.0), VolumeTransformL2W));
    // Initialize accumulated light energy.
    float4 LightEnergy = 0;
    // Jitter Entry position to avoid artifacts.
    JitterEntryPos(EntryPos, LocalCamVec, MaterialParameters);

    float3 CurPos = EntryPos;
    int i = 0;
    for (i = 0; i < Steps; i++)
    {
        // Label volume ignores clipping.
        AccumulateOneRaymarchLabelStep(LightEnergy, CurPos, LabelVolume, StepSizeWorld);
	    // Exit early if light energy (opacity) is already very high (so future steps would have almost no impact on color).
        if (LightEnergy.a > 0.99f)
        {
            LightEnergy.a = 1.0f;
            break;
        };
        CurPos += LocalCamVec;
    }
    return LightEnergy;
}



// Performs lit raymarch for the current pixel. The lighting information is taken from a precomputed light volume.
float4 PerformLitRaymarchFixedStep(Texture3D DataVolume, // Data Volume
                              Texture2D TF, float2 TFIntensityDomain, // Transfer func and intensity domain modifier
                              Texture3D LightVolume, // Light Volume  
                              float4x4 VolumeTransformL2W,
                              float3 EntryPos, float3 ExitPos, float Steps, // Entry&Exit in UVW space
                              FMaterialPixelParameters MaterialParameters)                      // Material Parameters
{
    float3 LocalCamVecNorm = normalize(ExitPos - EntryPos);
    float3 LocalCamVec = LocalCamVecNorm * length(ExitPos - EntryPos) / Steps;
    // Get step size in world units to be consistent with compute shaders' opacity calculations.
    float StepSizeWorld = length(mul(float4(LocalCamVec, 0.0), VolumeTransformL2W));
    // Initialize accumulated light energy.
    float4 LightEnergy = 0;
    // Jitter Entry position to avoid artifacts.
    JitterEntryPos(EntryPos, LocalCamVec, MaterialParameters);

    float3 CurPos = EntryPos;
    int i = 0;
    for (i = 0; i < Steps; i++)
    {
        // Label volume ignores clipping.
        AccumulateOneRaymarchStep(LightEnergy, CurPos, DataVolume, TF, TFIntensityDomain, LightVolume, StepSizeWorld);
	    // Exit early if light energy (opacity) is already very high (so future steps would have almost no impact on color).
        if (LightEnergy.a > 0.99f)
        {
            LightEnergy.a = 1.0f;
            break;
        };
        CurPos += LocalCamVec;
    }
    return LightEnergy;
}

// Performs the combined raymarch, actually marching both volumes in lockstep.
float4 PerformActualCombinedRaymarch(float3 EntryPos1, float3 LocalCamVec1,
                                     float3 EntryPos2, float3 LocalCamVec2, float StepSizeWorld, float Steps, // Entry&Exit in UVW space
                                     Texture3D DataVolume, // Data Volume 
                                     Texture2D TF, float2 TFIntensityDomain, // Transfer func and intensity domain modifier
                                     Texture3D LightVolume, // Light Volume  
                                     Texture3D LabelVolume,
                                     float4x4 VolumeTransformL2W,
                                     FMaterialPixelParameters MaterialParameters)
{
    // Initialize accumulated light energy.
    float4 LightEnergy = 0;
    // Jitter Entry position to avoid artifacts.
    JitterEntryPos(EntryPos1, LocalCamVec1, MaterialParameters);
    JitterEntryPos(EntryPos2, LocalCamVec2, MaterialParameters);

    float3 CurPos1 = EntryPos1;
    float3 CurPos2 = EntryPos2;

    int i = 0;
    for (i = 0; i < Steps; i++)
    {
        if (all(saturate(CurPos1) == CurPos1))
            AccumulateOneRaymarchLabelStep(LightEnergy, CurPos1, LabelVolume, StepSizeWorld);
        
        if (all(saturate(CurPos2) == CurPos2))
            AccumulateOneRaymarchStep(LightEnergy, CurPos2, DataVolume, TF, TFIntensityDomain, LightVolume, StepSizeWorld);

	    // Exit early if light energy (opacity) is already very high (so future steps would have almost no impact on color).
        if (LightEnergy.a > 0.99f)
        {
            LightEnergy.a = 1.0f;
            break;
        };
        CurPos1 += LocalCamVec1;
        CurPos2 += LocalCamVec2;
    }
    return LightEnergy;
}


// Performs cube setup for both volumes, then depending on which were hit performs label-only, 
// volume-only or combined raymarch.
float4 PerformCombinedRaymarch(Texture3D DataVolume, // Data Volume
                               Texture2D TF, float2 TFIntensityDomain, // Transfer func and intensity domain modifier
                               Texture3D LightVolume, // Light Volume  
                               Texture3D LabelVolume, // Label Volume  
                               float4x4 DataVolumeTransformW2L, float4x4 DataVolumeTransformL2W, // Offset volume transforms
                               float4x4 LabelVolumeTransformW2L, float4x4 LabelVolumeTransformL2W, // Offset volume transforms
                               float ScaleDownFactor, float Steps,
                               FMaterialPixelParameters Parameters, float3 CameraWorld)
{
    float BoxThickness1, BoxThickness2;
    float4 EntryPos1, ExitPos1, EntryPos2, ExitPos2;
    
    // Get Local Entry and Exit points and also the box thickness in local space.
    PerformOffsetRaymarchCubeSetup(Parameters, LabelVolumeTransformW2L, EntryPos1, ExitPos1, BoxThickness1);
    PerformOffsetRaymarchCubeSetup(Parameters, DataVolumeTransformW2L, EntryPos2, ExitPos2, BoxThickness2);
    
    if (BoxThickness1 == 0 && BoxThickness2 == 0)
    {
        // Box thickness is 0 for both -> no intersection
        return float4(0, 0, 0, 0);
    }

    if (BoxThickness2 == 0)
    {
        // Hit only the label volume -> perform only label volume raymarch
        return PerformLabelOnlyRaymarchFixedSteps(LabelVolume, LabelVolumeTransformL2W,
                                                  EntryPos1.xyz, ExitPos1.xyz, Steps, Parameters);
    }

    if (BoxThickness1 == 0)
    {
        // Only the offset box has non-zero thickness -> perform regular raymarch on it.
        return PerformLitRaymarchFixedStep(DataVolume, TF, TFIntensityDomain, LightVolume, 
                                        DataVolumeTransformL2W, EntryPos2.xyz, ExitPos2.xyz, Steps, Parameters);
    }

    // The hard case - both volumes have non-zero thicknesses
    // Gotta 
    // 1) get the entry and exit points in world space and get their distance to camera
    // 2) Sort them, so that we use the closer entry and further exit.
    // 3) Transform both world coords into 4 local ones (Entry, Exit point in both local spaces)
    // 4) Raymarch both in lockstep.
    // ???
    // 5) Profit!

    // Get all Entry/Exit points in world space

    // First volume - get entry, exit in local (from UVW)
    EntryPos1.xyz = UVWToUnitLocal(EntryPos1.xyz);
    ExitPos1.xyz = UVWToUnitLocal(ExitPos1.xyz);
    // And into world space.
    EntryPos1 = mul(EntryPos1, LabelVolumeTransformL2W);
    ExitPos1 = mul(ExitPos1, LabelVolumeTransformL2W);
    // Second volume - get entry, exit in local (from UVW)
    EntryPos2.xyz = UVWToUnitLocal(EntryPos2.xyz);
    ExitPos2.xyz = UVWToUnitLocal(ExitPos2.xyz);
    // And into world space.
    EntryPos2 = mul(EntryPos2, DataVolumeTransformL2W);
    ExitPos2 = mul(ExitPos2, DataVolumeTransformL2W);
    
    // A different way of ordering the entry + exit pts, also works but seems more complicated...
    // // Get world to view
    //float3 EntryPos1View = mul(EntryPos1 + View.PreViewTranslation, View.TranslatedWorldToView).xyz;
    //float3 EntryPos2View = mul(EntryPos2 + View.PreViewTranslation, View.TranslatedWorldToView).xyz;
    //float3 ExitPos1View = mul(ExitPos1 + View.PreViewTranslation, View.TranslatedWorldToView).xyz;
    //float3 ExitPos2View = mul(ExitPos2 + View.PreViewTranslation, View.TranslatedWorldToView).xyz;
	// // Sort on Z coord.
    //if (EntryPos1View.z < EntryPos2View.z)
    //{
    //    CloserEntryWorld = EntryPos1;
    //}
    //else
    //{
    //    CloserEntryWorld = EntryPos2;
    //}
	//
    //if (ExitPos1View.z > ExitPos2View.z)
    //{
    //    FurtherExitWorld = ExitPos1;
    //}
    //else
    //{
    //    FurtherExitWorld = ExitPos2;
    //}
    
    float4 CloserEntryWorld, FurtherExitWorld;

    if (distance(EntryPos1.xyz, CameraWorld) < distance(EntryPos2.xyz, CameraWorld))
    {
        CloserEntryWorld = EntryPos1;

    }
    else
    {
        CloserEntryWorld = EntryPos2;
    }

    if (distance(ExitPos1.xyz, CameraWorld) > distance(ExitPos2.xyz, CameraWorld))
    {
        FurtherExitWorld = ExitPos1;
    }
    else
    {
        FurtherExitWorld = ExitPos2;
    }
	
    // We got Entry&Exit in world space, transform back into local for both volumes.
    EntryPos1.xyz = UnitLocaltoUVW(mul(CloserEntryWorld, LabelVolumeTransformW2L).xyz);
    EntryPos2.xyz = UnitLocaltoUVW(mul(CloserEntryWorld, DataVolumeTransformW2L).xyz);

    float4 TotalMarchingVectorWorld = FurtherExitWorld - CloserEntryWorld;
       
    float3 LocalCamVec1 = mul(TotalMarchingVectorWorld, LabelVolumeTransformW2L).xyz / Steps;
    float3 LocalCamVec2 = mul(TotalMarchingVectorWorld, DataVolumeTransformW2L).xyz / Steps;
    float StepSizeWorld = length(TotalMarchingVectorWorld) / Steps;

    return PerformActualCombinedRaymarch(EntryPos1.xyz, LocalCamVec1, EntryPos2.xyz, LocalCamVec2, StepSizeWorld, Steps,
                                            DataVolume, TF, TFIntensityDomain,
                                            LightVolume, LabelVolume,
                                            DataVolumeTransformL2W, Parameters);
}