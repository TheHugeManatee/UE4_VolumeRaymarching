// This file contains both files used by ligt propagation shaders and material shaders used in-editor.
// After changing anything in this, the shaders in-editor need to be recompiled manually! (no file change detection there)

#pragma once

// The maximum distance when a voxel might be cut away partially by the cutting plane.
#define SQRT_3_HALF 0.86602540378f

// The maximum distance when a voxel might be cut away partially by the cutting plane.
#define SQRT_3 1.73205080757f

// The multiplier to use with the SQRT_3_HALF to get values fitting to a range of 0-1.
#define ONE_OVER_SQRT_3 0.57735026919f

// A constant density setting determining how opaque volumes are. Higher means more opaque.
// Currently unused because using Unreal world units gives nice results for our purposes.
// If you want denser volumes, multiply StepSize by this in SampleDataVolume / CorrectForStepSize.
// We found that because we use Unreal units in our shaders, the results are nice as they are for
// reasonably sized volumes.
#define RAYMARCH_FIXED_DENSITY 20.0


// Returns true if CurPos is clipped by the clipping plane defined by the center and direction.
// (Volume is clipped away in the clipping direction)
bool IsCurPosClipped(float3 CurPos, float3 ClippingCenter, float3 ClippingDirection)
{
    return (dot(CurPos - ClippingCenter, ClippingDirection) <= 0.0);
}

// Convert a uint in one byte range (0-255) to a corresponding U8 float (0 - 1 normalized).
float CharToFloat(uint inChar)
{
    return ((float) inChar) / 255.0;
}

// Convert a normalized 0-1 float to a 0-255 uint;
uint FloatToChar(float inFloat)
{
    return (uint) round(inFloat * 255.0);
}

// Remaps the input intensity to fit inside the intensity domain.
void RemapIntensity(inout float intensity, float2 TFIntensityDomain)
{
    intensity = clamp((intensity - TFIntensityDomain.x) / (TFIntensityDomain.y - TFIntensityDomain.x), 0, 1);
}

// Transforms pixel position into UVWs of the given pixel's center (center is why we add 0.5)
float3 GetUVW(uint3 pos, float3 dimensions)
{
    return (pos + float3(0.5, 0.5, 0.5)) / dimensions;
}

// Samples a Data volume, transforms it to fit the TF Intensity domain and then transforms it by the TF. Corrects the opacity to account for StepSize (in World units).
float4 SampleDataVolume(float3 CurPos, float StepSize, Texture3D Volume, SamplerState VolumeSampler, Texture2D TF, SamplerState TFSampler, float2 TFIntensityDomain)
{
    float VolumeSample = Volume.SampleLevel(VolumeSampler, saturate(CurPos), 0).r;
    RemapIntensity(VolumeSample, TFIntensityDomain);

    float4 ColorSample = TF.SampleLevel(TFSampler, float2(VolumeSample, 0.5), 0);
    ColorSample.a = 1.0 - pow(1.0 - ColorSample.a, StepSize);
    return ColorSample;
}

// Samples a Data volume, transforms it to fit the TF Intensity domain and then transforms it by the TF. Corrects the opacity to account for StepSize (in World units).
float4 SampleDataVolumeShort(float3 CurPos, float StepSize, Texture3D Volume, SamplerState VolumeSampler, Texture2D TF, SamplerState TFSampler, float2 TFIntensityDomain)
{

    int x, y, z;
    Volume.GetDimensions(x, y, z);
    // Decrease dimensions by 1, because with any UVW coord being == 1, we would load one after the array length
    // E.G - with X dimension == 2, U == 1, we want to sample x[1], not x[2] (as that doesn't exist)
    int3 Dimensions = int3(x - 1, y - 1, z - 1);
    // We don't want to interpolate here, use load instead of sample.
    float LabelValue = Volume.Load(int4(round(Dimensions * saturate(CurPos)), 0));

    if (LabelValue > 0)
    {
        return float4(1.0, 0.0, 0.0, 1.0);
    }
    //if (LabelValue.g > 0)
    //{
    //    return float4(0.0, 1.0, 0.0, 1.0);
    //}
    //if (LabelValue.b > 0)
    //{
    //    return float4(0.0, 0.0, 1.0, 1.0);
    //}
    //if (LabelValue.a > 0)
    //{
    //    return float4(1.0, 1.0, 1.0, 1.0);
    //}

    return float4(0, 0, 0, 0);
}

//// Samples a Data volume, transforms it to fit the TF Intensity domain and then transforms it by the TF. Corrects the opacity to account for StepSize (in World units).
//float4 SampleDataVolumeShort(float3 CurPos, float StepSize, Texture3D Volume, Texture2D TF, SamplerState TFSampler, float2 TFIntensityDomain)
//{
//    int x, y, z;
//    Volume.GetDimensions(x, y, z);
//    // Decrease dimensions by 1, because with any UVW coord being == 1, we would load one after the array length
//    // E.G - with X dimension == 2, U == 1, we want to sample x[1], not x[2] (as that doesn't exist)
//    int3 Dimensions = int3(x - 1, y - 1, z - 1);
//    // We don't want to interpolate here, use load instead of sample.
//    uint ActualVal = (Volume.Load(int4(round(Dimensions * saturate(CurPos)), 0)).r);
    
//    if (ActualVal != 0)
//        return float4(1.0, 1.0, 1.0, 1.0);
//    else
//        return float4(0.0, 0.0, 0.0, 0.0);

//    float VolumeSample = (ActualVal); // / 65565.0;
	
//    // RemapIntensity(VolumeSample, TFIntensityDomain);

//    float4 ColorSample = TF.SampleLevel(TFSampler, float2(VolumeSample, 0.5), 0);
//    ColorSample.a = 1.0 - pow(1.0 - ColorSample.a, StepSize);
//    return ColorSample;
//}


// Samples a Data volume at CurPos and given LOD;
float SampleDataIntensityLoded(float3 CurPos, Texture3D Volume, SamplerState VolumeSampler, float LOD)
{
    return Volume.SampleLevel(VolumeSampler, saturate(CurPos), LOD).r;
}

// Samples a Data volume, transforms it to fit the TF Intensity domain and thand transforms it by the TF. Does not take into account the step size
float4 SampleDataVolumeUniformStep(float3 CurPos, Texture3D Volume, SamplerState VolumeSampler, Texture2D TF, SamplerState TFSampler, float2 TFIntensityDomain)
{
    float VolumeSample = Volume.SampleLevel(VolumeSampler, CurPos, 0).r;
    RemapIntensity(VolumeSample, TFIntensityDomain);
    return TF.SampleLevel(TFSampler, float2(VolumeSample, 0.5), 0);
}

// Returns intensity corrected for stepsize.
float CorrectForStepSize(float Intensity, float StepSize)
{
    return 1.0 - pow(1.0 - Intensity, StepSize);
}

float3 UVWToLocal(float3 UVW)
{
    return (UVW - 0.5) * 2;
}

float3 LocalToUVW(float3 Local)
{
    return (Local / 2) + 0.5;
}

// Go from UVW coords to local coords of a unit cube (from [0, 1] to [-0.5, 0.5])
float3 UVWToUnitLocal(float3 UVW)
{
    return (UVW - 0.5);
}


// Go from Local coords of a unit cube to UVW (from [-0.5, 0.5] to [0, 1])
float3 UnitLocaltoUVW(float3 Local)
{
    return (Local + 0.5);
}