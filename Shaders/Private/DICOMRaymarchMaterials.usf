// This file contains functions used in Custom nodes in our raymarching materials.
// Because editing in custom node is horrible, it's nicer to just include and use a single 
// function from this file.

// Beware, modifications to this file will not be detected by the material shaders and they will not
// be recompiled. Shaders using this file have to be recompiled manually! (unless I find a way
// to tell the shadercompiler to always recompile the raymarch shaders on startup)

#pragma once
#include "RaymarchMaterialCommon.usf"

// Performs raymarch cube setup for this pixel. Returns the position of entry to the cube in rgb channels 
// and thickness of the cube in alpha. All values returned are in UVW space.
float4 PerformRaymarchCubeSetup(FMaterialPixelParameters MaterialParameters)
{
    // Get scene depth at this pixel.
    float LocalSceneDepth = CalcSceneDepth(ScreenAlignedPosition(GetScreenPosition(MaterialParameters)));

    // Get camera forward vector in world space.
    float3 CameraFWDVecWorld = mul(float3(0.00000000, 0.00000000, 1.00000000), ResolvedView.ViewToTranslatedWorld);

    // Get world space vector going from camera center to current scene depth.
    float3 WorldDepthVec = normalize(MaterialParameters.CameraVector) * LocalSceneDepth;

    // Transform this vector into the box's local space
    WorldDepthVec = mul(WorldDepthVec, GetPrimitiveData(MaterialParameters.PrimitiveId).WorldToLocal);

    // Get actual depth in local space, account for mesh bounds (by default, we use a centered 1x1x1 cube mesh, so this is unnecessary)
    LocalSceneDepth = length(WorldDepthVec);
    // LocalSceneDepth /= (GetPrimitiveData(MaterialParameters.PrimitiveId).LocalObjectBoundsMax.x * 2);

    // Account for difference between camera center vector and camera-to-pixel depth
    LocalSceneDepth /= abs(dot(CameraFWDVecWorld, MaterialParameters.CameraVector));

    // Get cam pos and vector into local space too.
    float3 LocalCamPos = mul(float4(ResolvedView.WorldCameraOrigin, 1.00000000), (GetPrimitiveData(MaterialParameters.PrimitiveId).WorldToLocal)).xyz;
    float3 LocalCamVec = -normalize(mul(MaterialParameters.CameraVector, GetPrimitiveData(MaterialParameters.PrimitiveId).WorldToLocal));

    // Transform camera pos from local to UVW coords (from +-0.5 to [0 - 1]). Again, The LocalObjectBoundsMax only have an effect if using a non-default cube mesh.
    LocalCamPos += 0.5;
    float3 InverseRayDirVec = 1 / LocalCamVec;

    // Because now we're in texture space where our box is at [0, 1] in each axis, it's easy to get intersections.
    // LowIntersections will have the distance of the ray in X,Y,Z before it hits the respective axis.
    // HighIntersections will have the distance of the ray in X,Y,Z before it reaches 1 in the respective axis.
    float3 LowIntersections = (0 - LocalCamPos) * InverseRayDirVec;
    float3 HighIntersections = (1 - LocalCamPos) * InverseRayDirVec;

    // Get closest and furthest intersections
    float3 ClosestIntersections = min(LowIntersections, HighIntersections);
    float3 FurthestIntersections = max(LowIntersections, HighIntersections);

    // The actual intersections of the box are the 2 values in the middle of the pack.
    // T0 (entry) = the farthest of the closest intersections
    float t0 = max(ClosestIntersections.x, max(ClosestIntersections.y, ClosestIntersections.z));
    // T1 (exit) = the closest of the furthest intersections
    float t1 = min(FurthestIntersections.x, min(FurthestIntersections.y, FurthestIntersections.z));

    // Make sure the entry point is not behind the camera
    t0 = max(0, t0);

    // Make sure the exit point is not behind other scene geometry.
    t1 = min(t1, LocalSceneDepth);

    // Calculate box thickness at this pixel (in local space).
    float BoxThickness = max(0, t1 - t0);

    // Get entry position in UVW space.
    float3 EntryPos = LocalCamPos + (t0 * LocalCamVec);
    
    return float4(EntryPos, BoxThickness);
}


// Performs raymarch cube setup for this pixel. Returns the position of entry to the cube in rgb channels 
// and thickness of the cube in alpha. All values returned are in UVW space.
float4 PerformExperimentalRaymarchCubeSetup(FMaterialPixelParameters MaterialParameters, out float4 EntryPos, out float3 ExitPos, in float Scaling)
{
    // Get scene depth at this pixel.
    float LocalSceneDepth = CalcSceneDepth(ScreenAlignedPosition(GetScreenPosition(MaterialParameters)));

    // Get camera forward vector in world space.
    float3 CameraFWDVecWorld = mul(float3(0.00000000, 0.00000000, 1.00000000), ResolvedView.ViewToTranslatedWorld);

    // Get world space vector going from camera center to current scene depth.
    float3 WorldDepthVec = normalize(MaterialParameters.CameraVector) * LocalSceneDepth;

    // Transform this vector into the box's local space
    WorldDepthVec = mul(WorldDepthVec, GetPrimitiveData(MaterialParameters.PrimitiveId).WorldToLocal);

    // Get actual depth in local space, account for mesh bounds (by default, we use a centered 1x1x1 cube mesh, so this is unnecessary)
    LocalSceneDepth = length(WorldDepthVec);
    // LocalSceneDepth /= (GetPrimitiveData(MaterialParameters.PrimitiveId).LocalObjectBoundsMax.x * 2);

    // Account for difference between camera center vector and camera-to-pixel depth
    LocalSceneDepth /= abs(dot(CameraFWDVecWorld, MaterialParameters.CameraVector));

    // Get cam pos and vector into local space too.
    float3 LocalCamPos = mul(float4(ResolvedView.WorldCameraOrigin, 1.00000000), (GetPrimitiveData(MaterialParameters.PrimitiveId).WorldToLocal) * Scaling).xyz;
    float3 LocalCamVec = -normalize(mul(MaterialParameters.CameraVector, GetPrimitiveData(MaterialParameters.PrimitiveId).WorldToLocal));

    // Transform camera pos from local to UVW coords (from +-0.5 to [0 - 1]). Again, The LocalObjectBoundsMax only have an effect if using a non-default cube mesh.
    LocalCamPos += 0.5; //  ((LocalCamPos / (GetPrimitiveData(MaterialParameters.PrimitiveId).LocalObjectBoundsMax * 2))) + 0.5;
    float3 InverseRayDirVec = 1 / LocalCamVec;

    // Because now we're in texture space where our box is at [0, 1] in each axis, it's easy to get intersections.
    // LowIntersections will have the distance of the ray in X,Y,Z before it hits the respective axis.
    // HighIntersections will have the distance of the ray in X,Y,Z before it reaches 1 in the respective axis.
    float3 LowIntersections = (0 - LocalCamPos) * InverseRayDirVec;
    float3 HighIntersections = (1 - LocalCamPos) * InverseRayDirVec;

    // Get closest and furthest intersections
    float3 ClosestIntersections = min(LowIntersections, HighIntersections);
    float3 FurthestIntersections = max(LowIntersections, HighIntersections);

    // The actual intersections of the box are the 2 values in the middle of the pack.
    // T0 (entry) = the farthest of the closest intersections
    float t0 = max(ClosestIntersections.x, max(ClosestIntersections.y, ClosestIntersections.z));
    // T1 (exit) = the closest of the furthest intersections
    float t1 = min(FurthestIntersections.x, min(FurthestIntersections.y, FurthestIntersections.z));

    // Make sure the entry point is not behind the camera
    t0 = max(0, t0);

    // Make sure the exit point is not behind other scene geometry.
    t1 = min(t1, LocalSceneDepth * Scaling);

    // Calculate box thickness at this pixel (in local space).
    float BoxThickness = max(0, t1 - t0);

    // Get entry position in UVW space.
    EntryPos.xyz = LocalCamPos + (t0 * LocalCamVec);
    EntryPos.a = BoxThickness;
    ExitPos = LocalCamPos + (t1 * LocalCamVec);

    return EntryPos;
}

// Performs raymarch cube setup for this pixel. Returns the position of entry to the cube in rgb channels 
// and thickness of the cube in alpha. All values returned are in UVW space. 
// This setup is for performing the setup from a shader that's NOT run on the cube itself, it takes the
// cube's transform as a parameter.
float4 PerformOffsetRaymarchCubeSetup(float4x4 CubeTransformW2L, FMaterialPixelParameters MaterialParameters)
{
    // Get scene depth at this pixel.
    float LocalSceneDepth = CalcSceneDepth(ScreenAlignedPosition(GetScreenPosition(MaterialParameters)));

    // Get camera forward vector in world space.
    float3 CameraFWDVecWorld = mul(float3(0.00000000, 0.00000000, 1.00000000), ResolvedView.ViewToTranslatedWorld);

    // Get world space vector going from camera center to current scene depth.
    float3 WorldDepthVec = normalize(MaterialParameters.CameraVector) * LocalSceneDepth;

    // Transform this vector into the box's local space
    WorldDepthVec = mul(WorldDepthVec, CubeTransformW2L);

    // Get actual depth in local space, account for mesh bounds (by default, we use a centered 1x1x1 cube mesh, so this is unnecessary)
    LocalSceneDepth = length(WorldDepthVec);

    // Account for difference between camera center vector and camera-to-pixel depth
    LocalSceneDepth /= abs(dot(CameraFWDVecWorld, MaterialParameters.CameraVector));

    // Get cam pos and vector into local space too.
    float3 LocalCamPos = mul(float4(ResolvedView.WorldCameraOrigin, 1.00000000), CubeTransformW2L).xyz;
    float3 LocalCamVec = -normalize(mul(float4(ResolvedView.WorldCameraOrigin + MaterialParameters.CameraVector, 1.00000000), CubeTransformW2L).xyz - LocalCamPos);

    // Transform camera pos from local to UVW coords (from +-0.5 to [0 - 1]). Again, The LocalObjectBoundsMax only have an effect if using a non-default cube mesh.
    LocalCamPos += 0.5;
    float3 InverseRayDirVec = 1 / LocalCamVec;
       
    // Get intersections
    float3 FirstIntersections = (0 - LocalCamPos) * InverseRayDirVec;
    float3 SecondIntersections = (1 - LocalCamPos) * InverseRayDirVec;

    // Find closest and furthest intersections
    float3 ClosestIntersections = min(FirstIntersections, SecondIntersections);
    float3 FurthestIntersections = max(FirstIntersections, SecondIntersections);

    // T0 (entry) = the farthest of the closest intersections
    float t0 = max(ClosestIntersections.x, max(ClosestIntersections.y, ClosestIntersections.z));
    // T1 (exit) = the closest of the furthest intersections
    float t1 = min(FurthestIntersections.x, min(FurthestIntersections.y, FurthestIntersections.z));

    // Make sure the entry point is not behind the camera
    t0 = max(0, t0);

    // Make sure the exit point is not behind other scene geometry.
    t1 = min(t1, LocalSceneDepth);

    // Calculate box thickness at this pixel (in local space).
    float BoxThickness = max(0, t1 - t0);

    // Get entry position in local space.
    float3 EntryPos = LocalCamPos + (t0 * LocalCamVec);
    
    return float4(EntryPos, BoxThickness);
}

// Performs lit raymarch for the current pixel. The lighting information is taken from a precomputed light volume.
float4 PerformLitRaymarch(Texture3D DataVolume, // Data Volume 
                          Texture2D TF, float2 TFIntensityDomain, // Transfer func and intensity domain modifier
                          Texture3D LightVolume, // Light Volume  
                          float3 CurPos, float MaxSteps, float StepSize, float FinalStep, // Position of ray entry to cube, number of steps, size of a step and a 0-1 value of how big the final step is compared to regular steps 
                          float3 ClippingCenter, float3 ClippingDirection, // Clipping plane position and direction of clipped away region
                          FMaterialPixelParameters MaterialParameters)                      // Material Parameters
{
// Get camera vector in local space and multiply it by step size.
    float3 LocalCamVec = -normalize(mul(MaterialParameters.CameraVector, GetPrimitiveData(MaterialParameters.PrimitiveId).WorldToLocal)) * StepSize;
    // Get step size in world units to be consistent with compute shaders' opacity calculations.
    float StepSizeWorld = length(mul(LocalCamVec, GetPrimitiveData(MaterialParameters.PrimitiveId).LocalToWorld));
    // Initialize accumulated light energy.
    float4 LightEnergy = 0;
    // Jitter Entry position to avoid artifacts.
    JitterEntryPos(CurPos, LocalCamVec, MaterialParameters);

    int i = 0;
    for (i = 0; i < MaxSteps; i++)
    {
        CurPos += LocalCamVec; // Because we jitter only "against" the direction of LocalCamVec, start marching before first sample.
	    // Any position that is clipped by the clipping plane shall be ignored.
        if (!IsCurPosClipped(saturate(CurPos), ClippingCenter, ClippingDirection))
        {
            AccumulateOneRaymarchStep(LightEnergy, CurPos, DataVolume, TF, TFIntensityDomain, LightVolume, StepSizeWorld);
        }

        // Exit early if light energy (opacity) is already very high (so future steps would have almost no impact on color).
        if (LightEnergy.a > 0.95f)
        {
            LightEnergy.a = 1.0f;
            break;
        };
    }

    // Handle FinalStep (only if we went through all the previous steps and the final step size is above zero)
    if (i == MaxSteps && FinalStep > 0.0f)
    {
        CurPos += LocalCamVec * (FinalStep);
        // If the final step is clipped, don't do anything.
        if (!IsCurPosClipped(saturate(CurPos), ClippingCenter, ClippingDirection))
        {
            AccumulateOneRaymarchStep(LightEnergy, CurPos, DataVolume, TF, TFIntensityDomain, LightVolume, StepSizeWorld * FinalStep);
        }
    }

    return LightEnergy;
}


// Performs an intensity raymarch for the current pixel. This means as soon as the volume is hit, set full opacity and just return the grayscale as a color.
// TODO - this could be done much smarter, by taking the cutting plane into account already when generating the entry and exit points!
// or notTODO? - that can also be done for the regular raymarcher! But since labeling volumes ignore cutting plane, the labeled versions would still need to
// march the whole cube anyways.
float4 PerformIntensityRaymarch(Texture3D DataVolume, // Data Volume
                                  float3 CurPos, float MaxSteps, float StepSize, float FinalStep, // Position of ray entry to cube, number of steps, size of a step and a 0-1 value of how big the final step is compared to regular steps 
                                  float3 ClippingCenter, float3 ClippingDirection, // Clipping plane position and direction of clipped away region
                                  FMaterialPixelParameters MaterialParameters)                      // Material Parameters
{
    // Get camera vector in local space and multiply it by step size.
    float3 LocalCamVec = -normalize(mul(MaterialParameters.CameraVector, GetPrimitiveData(MaterialParameters.PrimitiveId).WorldToLocal)) * StepSize;
    // Jitter Entry position to avoid artifacts.
    JitterEntryPos(CurPos, LocalCamVec, MaterialParameters);

    int i = 0;
    for (i = 0; i < MaxSteps; i++)
    {
        CurPos += LocalCamVec;
	    // Any position that is clipped by the clipping plane shall be ignored, otherwise just return the hit color.
        if (!IsCurPosClipped(CurPos, ClippingCenter, ClippingDirection))
        {
            float GrayScale = DataVolume.SampleLevel(Material.Clamp_WorldGroupSettings, saturate(CurPos), 0).r;
            return float4(GrayScale, GrayScale, GrayScale, 1);
            break;
        }
    }

    // Handle FinalStep (only if we went through all the previous steps and the final step size is above zero)
    if (i == MaxSteps && FinalStep > 0.00f)
    {
        CurPos += LocalCamVec * (FinalStep);
        if (!IsCurPosClipped(CurPos, ClippingCenter, ClippingDirection))
        {
            float GrayScale = DataVolume.SampleLevel(Material.Clamp_WorldGroupSettings, saturate(CurPos), 0).r;
            return float4(GrayScale, GrayScale, GrayScale, 1);
            break;
        }
    }

    // Didn't hit anything
    return float4(0.0, 0.0, 0.0, 0.0);
}


// Performs lit raymarch for the current pixel. Also takes into account a provided labeling volume. 
// Labeling volume ignores the clipping plane, so labels are always visible.
// The lighting information is taken from a precomputed light volume.
float4 PerformLitRaymarchLabeled(Texture3D DataVolume, // Data Volume
                                 Texture2D TF, float2 TFIntensityDomain, // Transfer func and intensity domain modifier
                                 Texture3D LightVolume,  Texture3D LabelVolume, 
                                 float3 CurPos, float MaxSteps, float StepSize, float FinalStep, // Position of ray entry to cube, number of steps, size of a step and a 0-1 value of how big the final step is compared to regular steps 
                                 float3 ClippingCenter, float3 ClippingDirection, // Clipping plane position and direction of clipped away region
                                 FMaterialPixelParameters MaterialParameters)                    // Material Parameters
{
    // Get camera vector in local space and multiply it by step size.
    float3 LocalCamVec = -normalize(mul(MaterialParameters.CameraVector, GetPrimitiveData(MaterialParameters.PrimitiveId).WorldToLocal)) * StepSize;
    // Get step size in world units to be consistent with compute shaders' opacity calculations.
    float StepSizeWorld = length(mul(LocalCamVec, GetPrimitiveData(MaterialParameters.PrimitiveId).LocalToWorld));
    // Initialize accumulated light energy.
    float4 LightEnergy = 0;
    // Jitter Entry position to avoid artifacts.
    JitterEntryPos(CurPos, LocalCamVec, MaterialParameters);

    int i = 0;
    for (i = 0; i < MaxSteps; i++)
    {
        CurPos += LocalCamVec;
        // Label volume ignores clipping.
        AccumulateOneRaymarchLabelStep(LightEnergy, CurPos, LabelVolume, StepSizeWorld);
	    // Any position that is clipped by the clipping plane shall be ignored.
        if (!IsCurPosClipped(saturate(CurPos), ClippingCenter, ClippingDirection))
        {
            AccumulateOneRaymarchStep(LightEnergy, CurPos, DataVolume, TF, TFIntensityDomain, LightVolume, StepSizeWorld);
        }

        // Exit early if light energy (opacity) is already very high (so future steps would have almost no impact on color).
        if (LightEnergy.a > 0.95f)
        {
            LightEnergy.a = 1.0f;
            break;
        };
    }

    // Handle FinalStep (only if we went through all the previous steps and the final step size is above zero)
    if (i == MaxSteps && FinalStep > 0.0f)
    {
        CurPos += LocalCamVec * (FinalStep);
        // Accumulate label.
        AccumulateOneRaymarchLabelStep(LightEnergy, CurPos, LabelVolume, StepSizeWorld * FinalStep);
        // If the final step is clipped, don't do anything.
        if (!IsCurPosClipped(saturate(CurPos), ClippingCenter, ClippingDirection))
        {
            AccumulateOneRaymarchStep(LightEnergy, CurPos, DataVolume, TF, TFIntensityDomain, LightVolume, StepSizeWorld * FinalStep);
        }
    }

    return LightEnergy;
}


// Performs intensity raymarch for the current pixel. Also takes into account a provided labeling volume. 
// Labeling volume ignores the clipping plane, so labels are always visible. 
// Intensity raymarch means as soon as we hit the volume, we take that as a fully opaque sample, mix in the color gotten from sampling labels until that point and return.
float4 PerformIntensityRaymarchLabeled(Texture3D DataVolume, Texture3D LabelVolume, 
                                        float3 CurPos, float MaxSteps, float StepSize, float FinalStep, // Position of ray entry to cube, number of steps, size of a step and a 0-1 value of how big the final step is compared to regular steps 
                                        float3 ClippingCenter, float3 ClippingDirection, // Clipping plane position and direction of clipped away region
                                        FMaterialPixelParameters MaterialParameters)                    // Material Parameters
{
    // Get camera vector in local space and multiply it by step size.
    float3 LocalCamVec = -normalize(mul(MaterialParameters.CameraVector, GetPrimitiveData(MaterialParameters.PrimitiveId).WorldToLocal)) * StepSize;
    // Get step size in world units to be consistent with compute shaders' opacity calculations.
    float StepSizeWorld = length(mul(LocalCamVec, GetPrimitiveData(MaterialParameters.PrimitiveId).LocalToWorld));
    // Initialize accumulated light energy.
    float4 LightEnergy = 0;
    // Jitter Entry position to avoid artifacts.
    JitterEntryPos(CurPos, LocalCamVec, MaterialParameters);

    int i = 0;
    for (i = 0; i < MaxSteps; i++)
    {
        CurPos += LocalCamVec;
        // Label volume ignores clipping, so accumulate the color from that.
        AccumulateOneRaymarchLabelStep(LightEnergy, CurPos, LabelVolume, StepSizeWorld);
	    // Once we hit the volume, raymarching is over. Take the sample as a fully opaque one, mix in the current label color and return.
        if (!IsCurPosClipped(saturate(CurPos), ClippingCenter, ClippingDirection))
        {
            float GrayScale = DataVolume.SampleLevel(Material.Clamp_WorldGroupSettings, saturate(CurPos), 0).r;
            AccumulateLightEnergy(LightEnergy, float4(GrayScale, GrayScale, GrayScale, 1.0));
            return LightEnergy;
        }

        // Exit early if light energy (opacity) is already very high (so future steps would have almost no impact on color).
        // TODO - not sure how useful this is here, unless we have a lot of very opaque labels, this will almost never happen.
        if (LightEnergy.a > 0.95f)
        {
            LightEnergy.a = 1.0f;
            break;
        };
    }

    // Handle FinalStep (only if we went through all the previous steps and the final step size is above zero)
    if (i == MaxSteps && FinalStep > 0.0f)
    {
        CurPos += LocalCamVec * (FinalStep);
        // Accumulate label.
        AccumulateOneRaymarchLabelStep(LightEnergy, CurPos, LabelVolume, StepSizeWorld * FinalStep);
        // If the final step is clipped, don't do anything.
        if (!IsCurPosClipped(saturate(CurPos), ClippingCenter, ClippingDirection))
        {
            float GrayScale = DataVolume.SampleLevel(Material.Clamp_WorldGroupSettings, saturate(CurPos), 0).r;
            AccumulateLightEnergy(LightEnergy, float4(GrayScale, GrayScale, GrayScale, 1.0));
        }
    }

    return LightEnergy;
}


float4 PerformShadowRaymarch(Texture3D LightVolume, // Light Volume
                                 float3 CurPos, float MaxSteps, float StepSize, float FinalStep, // Position of ray entry to cube, number of steps, size of a step and a 0-1 value of how big the final step is compared to regular steps 
                                 FMaterialPixelParameters MaterialParameters)
{

     // Get camera vector in local space and multiply it by step size.
    float3 LocalCamVec = -normalize(mul(MaterialParameters.CameraVector, GetPrimitiveData(MaterialParameters.PrimitiveId).WorldToLocal)) * StepSize;
    // Get step size in world units to be consistent with compute shaders' opacity calculations.
    float StepSizeWorld = length(mul(LocalCamVec, GetPrimitiveData(MaterialParameters.PrimitiveId).LocalToWorld));
    // Initialize accumulated light energy.
    float4 LightEnergy = 0;
    // Jitter Entry position to avoid artifacts.
    JitterEntryPos(CurPos, LocalCamVec, MaterialParameters);

    int i = 0;
    for (i = 0; i < MaxSteps; i++)
    {
        CurPos += LocalCamVec;
        float ShadowValue = 1 - LightVolume.SampleLevel(Material.Clamp_WorldGroupSettings, saturate(CurPos), 0).r;
        AccumulateLightEnergy(LightEnergy, float4(ShadowValue, ShadowValue, ShadowValue, ShadowValue));

        // Exit early if light energy (opacity) is already very high (so future steps would have almost no impact on color).
        // TODO - not sure how useful this is here, unless we have a lot of very opaque labels, this will almost never happen.
        if (LightEnergy.a > 0.95f)
        {
            LightEnergy.a = 1.0f;
            break;
        }
    }

    // Handle FinalStep (only if we went through all the previous steps and the final step size is above zero)
    if (i == MaxSteps && FinalStep > 0.01f)
    {
        CurPos += LocalCamVec * (FinalStep);
        float ShadowValue = 1 - LightVolume.SampleLevel(Material.Clamp_WorldGroupSettings, saturate(CurPos), 0).r;
        AccumulateLightEnergy(LightEnergy, float4(ShadowValue, ShadowValue, ShadowValue, ShadowValue));
    }

    return LightEnergy;
}
// Recomposes a matrix from 4 row vectors.
float4x4 MatrixFromRowVectors(float4 X0, float4 X1, float4 X2, float4 X3)
{
    return float4x4(X0.x, X0.y, X0.z, X0.a,
                    X1.x, X1.y, X1.z, X1.a,
                    X2.x, X2.y, X2.z, X2.a,
                    X3.x, X3.y, X3.z, X3.a);
}
